version: "3.5"

x-eca-server-variables: &eca-server-env-variables
  TZ: ${TIME_ZONE}
  DB_CONTAINER_WAIT: ${DB_CONTAINER_WAIT}
  DB_CONTAINER_WAIT_TIMEOUT: ${DB_CONTAINER_WAIT_TIMEOUT}
  JAVA_OPTS: "-Xmx2g"
  SPRING_PROFILES_ACTIVE: "docker-prod"
  QUEUE_EVALUATIONREQUESTQUEUE: ${QUEUE_EVALUATION_REQUEST_QUEUE}
  QUEUE_EVALUATIONOPTIMIZERREQUESTQUEUE: ${QUEUE_EVALUATION_OPTIMIZER_REQUEST_QUEUE}
  QUEUE_EXPERIMENTREQUESTQUEUE: ${QUEUE_EXPERIMENT_REQUEST_QUEUE}
  SPRING_DATASOURCE_URL: ${ECA_SERVER_JDBC_URL}
  SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
  SPRING_DATASOURCE_PASSWORD:  ${POSTGRES_PASSWORD}
  SPRING_JPA_HIBERNATE_DDLAUTO: "validate"
  SPRING_REDIS_HOST: "redis"
  SPRING_CACHE_TYPE: "redis"
  EXPERIMENT_DOWNLOADBASEURL: ${EXPERIMENT_DOWNLOAD_EXTERNAL_URL}
  OPENAPI_TOKENBASEURL: ${OAUTH2_TOKEN_EXTERNAL_URL}
  OPENAPI_BASEPATH: "/eca-server"
  AUTHSERVER_BASEURL: ${ECA_OAUTH_URL}
  AUDIT_ENABLED: "true"
  AUDIT_ASYNCEVENTS: ${AUDIT_ASYNC_EVENTS}
  AUDIT_THREADPOOLSIZE: ${AUDIT_THREAD_POOL_SIZE}
  REDELIVERY_ENABLED: "true"
  REDELIVERY_REDELIVERYINTERVALMILLIS: ${REDELIVERY_REDELIVERY_INTERVAL_MILLIS}
  LOCK_ENABLED: "true"

x-collect-logs-with-filebeat: &collect-logs-with-filebeat
  labels:
    collect_logs_with_filebeat: "true"
    decode_log_event_to_json_object: "true"

x-eca-server-base: &eca-server-base
  image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:eca-server
  depends_on:
    - postgres-db
    - rabbitmq
    - discovery-server
  <<: *collect-logs-with-filebeat

services:

  postgres-db:
    image: postgres:${POSTGRES_VERSION}
    container_name: postgres-db
    volumes:
      - ./postgres/postgresinit.sh:/docker-entrypoint-initdb.d/postgresinit.sh
      - ./postgres/backups:/backups
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: ${TIME_ZONE}
      PGTZ: ${TIME_ZONE}

  rabbitmq:
    image: rabbitmq:${RABBIT_MQ_VERSION}
    container_name: "rabbitmq"
    ports:
      - "15672:15672"
      - "15692:15692"
      - "5672:5672"
    volumes:
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.config
      - rabbit-data:/var/lib/rabbitmq
    environment:
      TZ: ${TIME_ZONE}

  s3-minio-storage:
    image: minio/minio:${MINIO_VERSION}
    container_name: s3-minio-storage
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_PROMETHEUS_AUTH_TYPE: "public"
    ports:
      - "9000:9000"
      - "9100:9100"
    volumes:
      - s3-minio-data:/data
    command: ["server", "--console-address", ":9100", "/data"]

  s3-minio-client:
    build: ./minio/mc/
    container_name: s3-minio-client
    depends_on:
      - s3-minio-storage
    environment:
      S3_MINIO_URL: ${S3_MINIO_URL}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      BUCKET_NAME: ${BUCKET_NAME}

  s3-minio-nginx-proxy:
    container_name: s3-minio-nginx-proxy
    image: nginx:${NGINX_VERSION}
    ports:
      - "8098:8098"
    volumes:
      - ./minio-proxy/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - s3-minio-storage

  discovery-server:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:discovery-server
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      TZ: ${TIME_ZONE}
      JAVA_OPTS: "-Xmx512m"
      SPRING_PROFILES_ACTIVE: "docker-prod"
    <<: *collect-logs-with-filebeat

  eca-server-instance-1:
    <<: *eca-server-base
    container_name: eca-server-instance-1
    environment:
      <<: *eca-server-env-variables

  eca-server-instance-2:
    <<: *eca-server-base
    container_name: eca-server-instance-2
    environment:
      <<: *eca-server-env-variables

  eca-oauth:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:eca-oauth
    container_name: eca-oauth
    environment:
      TZ: ${TIME_ZONE}
      DB_CONTAINER_WAIT: ${DB_CONTAINER_WAIT}
      DB_CONTAINER_WAIT_TIMEOUT: ${DB_CONTAINER_WAIT_TIMEOUT}
      JAVA_OPTS: "-Xmx756m"
      SPRING_PROFILES_ACTIVE: "docker-prod"
      SPRING_DATASOURCE_URL: ${ECA_OAUTH_JDBC_URL}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD:  ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDLAUTO: "validate"
      APP_WEBEXTERNALBASEURL: ${ECA_WEB_EXTERNAL_URL}
      OPENAPI_TOKENBASEURL: ${OAUTH2_TOKEN_EXTERNAL_URL}
      OPENAPI_BASEPATH: "/eca-oauth"
      AUDIT_ENABLED: "true"
      REDELIVERY_ENABLED: "true"
      REDELIVERY_REDELIVERYINTERVALMILLIS: ${REDELIVERY_REDELIVERY_INTERVAL_MILLIS}
      AUDIT_ASYNCEVENTS: ${AUDIT_ASYNC_EVENTS}
      AUDIT_THREADPOOLSIZE: ${AUDIT_THREAD_POOL_SIZE}
    depends_on:
      - postgres-db
      - discovery-server
    <<: *collect-logs-with-filebeat

  eca-web:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:eca-web
    container_name: eca-web
    environment:
      TZ: ${TIME_ZONE}
      JAVA_OPTS: "-Xmx512m"
      SPRING_PROFILES_ACTIVE: "docker-prod"
    depends_on:
      - discovery-server
    <<: *collect-logs-with-filebeat

  zuul-gate:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:zuul-gate
    container_name: zuul-gate
    environment:
      TZ: ${TIME_ZONE}
      JAVA_OPTS: "-Xmx1g"
      SPRING_PROFILES_ACTIVE: "docker-prod"
    ports:
      - "8080:8080"
    depends_on:
      - discovery-server
    <<: *collect-logs-with-filebeat

  eca-mail:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:eca-mail
    container_name: eca-mail
    environment:
      TZ: ${TIME_ZONE}
      DB_CONTAINER_WAIT: ${DB_CONTAINER_WAIT}
      DB_CONTAINER_WAIT_TIMEOUT: ${DB_CONTAINER_WAIT_TIMEOUT}
      JAVA_OPTS: "-Xmx756m"
      SPRING_PROFILES_ACTIVE: "docker-prod"
      SPRING_DATASOURCE_URL: ${NS_JDBC_URL}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD:  ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDLAUTO: "validate"
      OPENAPI_BASEPATH: "/eca-mail"
      OPENAPI_TOKENBASEURL: ${OAUTH2_TOKEN_EXTERNAL_URL}
      AUTHSERVER_BASEURL: ${ECA_OAUTH_URL}
    depends_on:
      - postgres-db
      - discovery-server
    <<: *collect-logs-with-filebeat

  eca-data-storage:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:eca-data-storage
    container_name: eca-data-storage
    environment:
      TZ: ${TIME_ZONE}
      DB_CONTAINER_WAIT: ${DB_CONTAINER_WAIT}
      DB_CONTAINER_WAIT_TIMEOUT: ${DB_CONTAINER_WAIT_TIMEOUT}
      JAVA_OPTS: "-Xmx756m"
      SPRING_PROFILES_ACTIVE: "docker-prod"
      SPRING_DATASOURCE_URL: ${ECA_DS_JDBC_URL}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD:  ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDLAUTO: "validate"
      OPENAPI_TOKENBASEURL: ${OAUTH2_TOKEN_EXTERNAL_URL}
      OPENAPI_BASEPATH: "/eca-ds"
      AUTHSERVER_BASEURL: ${ECA_OAUTH_URL}
      AUDIT_ENABLED: "true"
      REDELIVERY_ENABLED: "true"
      REDELIVERY_REDELIVERYINTERVALMILLIS: ${REDELIVERY_REDELIVERY_INTERVAL_MILLIS}
      AUDIT_ASYNCEVENTS: ${AUDIT_ASYNC_EVENTS}
      AUDIT_THREADPOOLSIZE: ${AUDIT_THREAD_POOL_SIZE}
    depends_on:
      - postgres-db
      - discovery-server
    <<: *collect-logs-with-filebeat

  eca-ers:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:eca-ers
    container_name: eca-ers
    environment:
      TZ: ${TIME_ZONE}
      DB_CONTAINER_WAIT: ${DB_CONTAINER_WAIT}
      DB_CONTAINER_WAIT_TIMEOUT: ${DB_CONTAINER_WAIT_TIMEOUT}
      JAVA_OPTS: "-Xmx1g"
      SPRING_PROFILES_ACTIVE: "docker-prod"
      SPRING_DATASOURCE_URL: ${ERS_JDBC_URL}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD:  ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDLAUTO: "validate"
      OPENAPI_BASEPATH: "/eca-ers"
    depends_on:
      - postgres-db
    <<: *collect-logs-with-filebeat

  eca-web-push:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:eca-web-push
    container_name: eca-web-push
    ports:
      - "8099:8099"
    environment:
      TZ: ${TIME_ZONE}
      SERVER_PORT: "8099"
      SPRING_PROFILES_ACTIVE: "docker-prod"
      AUTHSERVER_BASEURL: ${ECA_OAUTH_URL}
      OPENAPI_BASEPATH: "/eca-web-push"
      JAVA_OPTS: "-Xmx512m"
    <<: *collect-logs-with-filebeat

  eca-audit-log:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:eca-audit-log
    container_name: eca-audit-log
    environment:
      TZ: ${TIME_ZONE}
      DB_CONTAINER_WAIT: ${DB_CONTAINER_WAIT}
      DB_CONTAINER_WAIT_TIMEOUT: ${DB_CONTAINER_WAIT_TIMEOUT}
      JAVA_OPTS: "-Xmx512m"
      SPRING_PROFILES_ACTIVE: "docker-prod"
      SPRING_DATASOURCE_URL: ${ECA_AUDIT_LOG_JDBC_URL}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD:  ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDLAUTO: "validate"
      OPENAPI_TOKENBASEURL: ${OAUTH2_TOKEN_EXTERNAL_URL}
      OPENAPI_BASEPATH: "/eca-audit-log"
      AUTHSERVER_BASEURL: ${ECA_OAUTH_URL}
    depends_on:
      - postgres-db
      - discovery-server
    <<: *collect-logs-with-filebeat

  redis:
    image: redis:${REDIS_VERSION}
    container_name: redis
    environment:
      TZ: ${TIME_ZONE}
    ports:
      - "6379:6379"

  elasticsearch:
    image: elastic/elasticsearch:${ES_VERSION}
    container_name: elasticsearch
    environment:
      - "TZ=${TIME_ZONE}"
      - "discovery.type=single-node"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data:rw

  kibana:
    image: elastic/kibana:${ES_VERSION}
    container_name: kibana
    environment:
      TZ: ${TIME_ZONE}
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  filebeat:
    image: elastic/filebeat:${ES_VERSION}
    container_name: filebeat
    environment:
      TZ: ${TIME_ZONE}
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - filebeat-data:/usr/share/filebeat/data:rw
    command:
      - "-strict.perms=false"
    user: root

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION}
    container_name: prometheus
    environment:
      TZ: ${TIME_ZONE}
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.external-url=${PROMETHEUS_EXTERNAL_URL}"

  alertmanager:
    image: prom/alertmanager:${ALERTMANAGER_VERSION}
    container_name: alertmanager
    environment:
      TZ: ${TIME_ZONE}
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--web.external-url=${ALERT_MANAGER_EXTERNAL_URL}"

  alertmanager-adapter:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:alertmanager-adapter
    container_name: alertmanager-adapter
    environment:
      SERVER_PORT: "8080"
      JAVA_OPTS: "-Xmx256m"
      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN}
      TELEGRAM_BOTUSERNAME: ${TELEGRAM_BOTUSERNAME}
      TELEGRAM_CHATID: ${TELEGRAM_CHATID}
    ports:
      - "8090:8080"

  postgres-exporter:
    image: wrouesnel/postgres_exporter:${POSTGRES_EXPORTER_VERSION}
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    environment:
      TZ: ${TIME_ZONE}
      DATA_SOURCE_URI: ${PG_EXPORTER_DATASOURCE_URI}
      DATA_SOURCE_USER: ${POSTGRES_USER}
      DATA_SOURCE_PASS: ${POSTGRES_PASSWORD}
    depends_on:
      - postgres-db

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION}
    container_name: grafana
    environment:
      TZ: ${TIME_ZONE}
      GF_SECURITY_ADMIN_USER: ${GRAFANA_LOGIN}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  postgres-data:
    name: postgres-data
  rabbit-data:
    name: rabbit-data
  s3-minio-data:
    name: s3-minio-data
  elasticsearch-data:
    name: elasticsearch-data
  filebeat-data:
    name: filebeat-data
  prometheus-data:
    name: prometheus-data
  grafana-data:
    name: grafana-data
