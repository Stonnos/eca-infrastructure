version: "3.5"
services:

  eca-db:
    image: postgres:${POSTGRES_VERSION}
    container_name: eca-db
    volumes:
      - ./scripts/eca-db-postgresinit.sql:/docker-entrypoint-initdb.d/postgresinit.sql
      - eca-pgdata:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: "Asia/Novosibirsk"
      PGTZ: "Asia/Novosibirsk"

  notification-db:
    image: postgres:${POSTGRES_VERSION}
    container_name: notification-db
    volumes:
      - ./scripts/notification-db-postgresinit.sql:/docker-entrypoint-initdb.d/postgresinit.sql
      - notification-pgdata:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: "Asia/Novosibirsk"
      PGTZ: "Asia/Novosibirsk"

  ers-db:
    image: postgres:${POSTGRES_VERSION}
    container_name: ers-db
    volumes:
      - ./scripts/ers-db-postgresinit.sql:/docker-entrypoint-initdb.d/postgresinit.sql
      - ers-pgdata:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: "Asia/Novosibirsk"
      PGTZ: "Asia/Novosibirsk"

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: "rabbitmq"
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.config
      - rabbit-data:/var/lib/rabbitmq
    environment:
      TZ: "Asia/Novosibirsk"

  eca-server:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:eca-server
    container_name: eca-server
    command: ["/wait-for-it.sh", "eca-db:5432", "--timeout=${DB_CONTAINER_WAIT_TIMEOUT}", "--", "catalina.sh", "run"]
    volumes:
      - experiment-data:/home/experiment
    environment:
      TZ: "Asia/Novosibirsk"
      SPRING_PROFILES_ACTIVE: "docker"
    depends_on:
      - eca-db
      - rabbitmq
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  eca-oauth:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:eca-oauth
    container_name: eca-oauth
    command: ["/wait-for-it.sh", "eca-db:5432", "--timeout=${DB_CONTAINER_WAIT_TIMEOUT}", "--", "catalina.sh", "run"]
    environment:
      TZ: "Asia/Novosibirsk"
      SPRING_PROFILES_ACTIVE: "docker"
    depends_on:
      - eca-db
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  eca-web:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:eca-web
    container_name: eca-web
    environment:
      TZ: "Asia/Novosibirsk"
      SPRING_PROFILES_ACTIVE: "docker"
    depends_on:
      - eca-server
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  zuul-gate:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:zuul-gate
    container_name: zuul-gate
    environment:
      TZ: "Asia/Novosibirsk"
      SPRING_PROFILES_ACTIVE: "docker"
    ports:
      - "8080:8080"
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  notification-service:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:notification-service
    container_name: notification-service
    command: ["/wait-for-it.sh", "notification-db:5432", "--timeout=${DB_CONTAINER_WAIT_TIMEOUT}", "--", "java", "-jar", "notification-service.war"]
    environment:
      TZ: "Asia/Novosibirsk"
      SPRING_PROFILES_ACTIVE: "docker"
    ports:
      - "8443:8443"
    depends_on:
      - notification-db
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  evaluation-results-service:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:evaluation-results-service
    container_name: evaluation-results-service
    command: ["/wait-for-it.sh", "ers-db:5432", "--timeout=${DB_CONTAINER_WAIT_TIMEOUT}", "--", "java", "-jar", "evaluation-results-service.war"]
    environment:
      TZ: "Asia/Novosibirsk"
      SPRING_PROFILES_ACTIVE: "docker"
    ports:
      - "9443:9443"
    depends_on:
      - ers-db
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION}
    container_name: elasticsearch
    environment:
      TZ: "Asia/Novosibirsk"
    ports:
      - "9200:9200"
    environment:
      - "discovery.type=single-node"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data:rw

  kibana:
    image: docker.elastic.co/kibana/kibana:${ES_VERSION}
    container_name: kibana
    environment:
      TZ: "Asia/Novosibirsk"
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  filebeat:
    image: docker.elastic.co/beats/filebeat:${ES_VERSION}
    container_name: filebeat
    environment:
      TZ: "Asia/Novosibirsk"
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - filebeat-data:/usr/share/filebeat/data:rw
    user: root

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    environment:
      TZ: "Asia/Novosibirsk"
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    environment:
      TZ: "Asia/Novosibirsk"
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/:/etc/alertmanager/

  grafana:
    image: grafana/grafana
    container_name: grafana
    environment:
      TZ: "Asia/Novosibirsk"
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana

volumes:
  eca-pgdata:
    name: eca-pgdata
  rabbit-data:
    name: rabbit-data
  notification-pgdata:
    name: notification-pgdata
  ers-pgdata:
    name: ers-pgdata
  experiment-data:
    name: experiment-data
  elasticsearch-data:
    name: elasticsearch-data
  filebeat-data:
    name: filebeat-data
  prometheus-data:
    name: prometheus-data
  grafana-data:
    name: grafana-data