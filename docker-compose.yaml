version: "3.5"
services:

  postgres-db:
    image: postgres:${POSTGRES_VERSION}
    container_name: postgres-db
    volumes:
      - ./postgres/postgresinit.sh:/docker-entrypoint-initdb.d/postgresinit.sh
      - ./postgres/backups:/backups
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: ${TIME_ZONE}
      PGTZ: ${TIME_ZONE}

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: "rabbitmq"
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.config
      - rabbit-data:/var/lib/rabbitmq
    environment:
      TZ: ${TIME_ZONE}

  discovery-server:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:discovery-server
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      TZ: ${TIME_ZONE}
      SPRING_PROFILES_ACTIVE: "docker-prod"
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  eca-server:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:eca-server
    container_name: eca-server
    volumes:
      - experiment-data:/home/experiment
    environment:
      TZ: ${TIME_ZONE}
      DB_CONTAINER_WAIT: ${DB_CONTAINER_WAIT}
      DB_CONTAINER_WAIT_TIMEOUT: ${DB_CONTAINER_WAIT_TIMEOUT}
      JAVA_OPTS: "-Xmx2g"
      SPRING_PROFILES_ACTIVE: "docker-prod"
      SPRING_DATASOURCE_URL: ${ECA_SERVER_JDBC_URL}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD:  ${POSTGRES_PASSWORD}
      SPRING_TOKENDATASOURCE_URL: ${ECA_OAUTH_JDBC_URL}
      SPRING_TOKENDATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_TOKENDATASOURCE_PASSWORD:  ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDLAUTO: "validate"
      EXPERIMENT_DOWNLOADBASEURL: ${EXPERIMENT_DOWNLOAD_EXTERNAL_URL}
      SWAGGER2_TOKENBASEURL: ${OAUTH2_TOKEN_EXTERNAL_URL}
    depends_on:
      - postgres-db
      - rabbitmq
      - discovery-server
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  eca-oauth:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:eca-oauth
    container_name: eca-oauth
    environment:
      TZ: ${TIME_ZONE}
      DB_CONTAINER_WAIT: ${DB_CONTAINER_WAIT}
      DB_CONTAINER_WAIT_TIMEOUT: ${DB_CONTAINER_WAIT_TIMEOUT}
      SPRING_PROFILES_ACTIVE: "docker-prod"
      SPRING_DATASOURCE_URL: ${ECA_OAUTH_JDBC_URL}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD:  ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDLAUTO: "validate"
      RESET_PASSWORD_BASEURL: ${RESET_PASSWORD_EXTERNAL_URL}
      SWAGGER2_TOKENBASEURL: ${OAUTH2_TOKEN_EXTERNAL_URL}
    depends_on:
      - postgres-db
      - discovery-server
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  eca-web:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:eca-web
    container_name: eca-web
    environment:
      TZ: ${TIME_ZONE}
      SPRING_PROFILES_ACTIVE: "docker-prod"
    depends_on:
      - eca-server
      - discovery-server
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  zuul-gate:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:zuul-gate
    container_name: zuul-gate
    environment:
      TZ: ${TIME_ZONE}
      SPRING_PROFILES_ACTIVE: "docker-prod"
    ports:
      - "8080:8080"
    depends_on:
      - discovery-server
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  eca-mail:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:eca-mail
    container_name: eca-mail
    environment:
      TZ: ${TIME_ZONE}
      DB_CONTAINER_WAIT: ${DB_CONTAINER_WAIT}
      DB_CONTAINER_WAIT_TIMEOUT: ${DB_CONTAINER_WAIT_TIMEOUT}
      SPRING_PROFILES_ACTIVE: "docker-prod"
      SPRING_DATASOURCE_URL: ${NS_JDBC_URL}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD:  ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDLAUTO: "validate"
    depends_on:
      - postgres-db
      - discovery-server
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  evaluation-results-service:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:evaluation-results-service
    container_name: evaluation-results-service
    environment:
      TZ: ${TIME_ZONE}
      DB_CONTAINER_WAIT: ${DB_CONTAINER_WAIT}
      DB_CONTAINER_WAIT_TIMEOUT: ${DB_CONTAINER_WAIT_TIMEOUT}
      SPRING_PROFILES_ACTIVE: "docker-prod"
      SPRING_DATASOURCE_URL: ${ERS_JDBC_URL}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD:  ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDLAUTO: "validate"
    ports:
      - "9443:9443"
    depends_on:
      - postgres-db
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION}
    container_name: elasticsearch
    environment:
      - "TZ=${TIME_ZONE}"
      - "discovery.type=single-node"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data:rw

  kibana:
    image: docker.elastic.co/kibana/kibana:${ES_VERSION}
    container_name: kibana
    environment:
      TZ: ${TIME_ZONE}
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  filebeat:
    image: docker.elastic.co/beats/filebeat:${ES_VERSION}
    container_name: filebeat
    environment:
      TZ: ${TIME_ZONE}
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - filebeat-data:/usr/share/filebeat/data:rw
    command:
      - "-strict.perms=false"
    user: root

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION}
    container_name: prometheus
    environment:
      TZ: ${TIME_ZONE}
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.external-url=${PROMETHEUS_EXTERNAL_URL}"

  alertmanager:
    image: prom/alertmanager:${ALERTMANAGER_VERSION}
    container_name: alertmanager
    environment:
      TZ: ${TIME_ZONE}
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--web.external-url=${ALERT_MANAGER_EXTERNAL_URL}"

  postgres-exporter:
    image: wrouesnel/postgres_exporter
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    environment:
      TZ: ${TIME_ZONE}
      DATA_SOURCE_URI: ${PG_EXPORTER_DATASOURCE_URI}
      DATA_SOURCE_USER: ${POSTGRES_USER}
      DATA_SOURCE_PASS: ${POSTGRES_PASSWORD}
    depends_on:
      - postgres-db

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION}
    container_name: grafana
    environment:
      TZ: ${TIME_ZONE}
      GF_SECURITY_ADMIN_USER: ${GRAFANA_LOGIN}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  postgres-data:
    name: postgres-data
  rabbit-data:
    name: rabbit-data
  experiment-data:
    name: experiment-data
  elasticsearch-data:
    name: elasticsearch-data
  filebeat-data:
    name: filebeat-data
  prometheus-data:
    name: prometheus-data
  grafana-data:
    name: grafana-data